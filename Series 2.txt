Changelog for Quilt. A pattern generator.

2.5

	- Backports from 3.0 development branch:
	 - Bug fix for dependent references when removing elements.
	 - Viewport-based selection, using middle, or ctrl-left, mouse button to select pattern element by a proximity search to the click location.
	  - Search is multi-threaded.
	 - Hotkeys in context menu.
	 - Zoom-to-selected (z).
	 - Allow negative X/Y position coordinates.
	 - Allow rename of pattern elements.
	 - Performance enhancements for relative rotation pipeline.
	 - UI refinements.
	 - Multi-threaded loader.
	 - Color preference for geometry not coming from selected element.
	 - ListBox context menu.

2.3

	- Backports from 3.0 development branch:
  	 - Fix for crash related to toggling filled polygon display.
	 - Fixed duplicate patterns showing up for rotations in the Quilt.
	 - Implement pattern extent drawing.
	  - Configurable color and whether it draws at all.

2.2.5

	- Backports from 3.0 development branch:
	 - Reworked the transformation pipeline to resolve issues around relative rotation combined with relative and offset positions.

2.2.4

	- Backports from 3.0 development branch:
	 - Bug fix for pattern placement.

2.2.3

	- Viewport enhancements
	- Drag-and-drop support for project loading.

2.2.2

	- Workaround for intel/Vulkan crashes in Veldrid.
	- Forms update to resolve Gtk issue.

2.2.1

	- Minor UI tweaks.
	- Veldrid viewport updates to use new nugets from Eto.Veldrid upstream project.
	 - OpenGL is problematic under .NET Core on non-Windows systems due to library issues.
	 - Upstream OpenTK dropped its platform support; upstream Eto.Veldrid has responded.
	 - This approach now provides :
	  Windows : Vulkan, Direct3D 11
	  macOS : metal
	  Linux : Vulkan, OpenGL

2.2

	- Library updates.

2.2b5

	- Accidentally had the clean-up (pattern duplicate screening) stage disabled; fixed.
	- Various fixes and clean-ups for the relative reference system. This approach is more centralized and robust.
	- Ongoing QA for array:
	 - Enable 'bounds after rotation' for array case, to control overlap within the array.

2.2b4

	- UI fix to disable array for bounding box.

2.2b3

	- Minor refactoring to use common infrastructure in some geometric operations.
	- Aggressive multithreading seems to overwhelm some systems. Moving to preprocessor switches to find best balance:
	 - GEOLIBTHREADED : GeoLib
	 - GWTHREADED : GeoWrangler.
	 - QUILTTHREADED : Variance
	 - SHAPELIBTHREADED : ShapeLibrary

2.2b2

	- Added 'B' control that sets whether the bounding box should be calculated after rotation is applied (checked) or before (unchecked).
	- Performance work.
	 - More multi-threading usage in pattern pipeline.

2.2b1

	- Shake-down.
	 - Multiple UI fixes.
	 - Fixed bug preventing rotation of non-drawn case (deferred evaluation related).
	- Added support for rotating around pivot point of reference element. Default is to rotate around element's bounding box.
	- Added support for independent aligning of flipped shapes in X and Y.

2.2a2

	- UI adjustments to work better in various ways.
	- Aligned Veldrid code with upstream.
	- Implemented relative positioning for pattern elements using relative array definition.
	- Avoid offering array controls for bounding elements.
	- Rotation review.
	 - Added UI elements and internal setting related code for array-relative vs shape-relative rotation.
	 - Implemented rotation handling relative to shape/array for shape construction.
	  - Initial QA looks promising. Need to review pivot point handling, but results look reasonable in current system.
	- Fixed some internal weakpoints for background tasks that get cancelled. Reliability/robustness work.	 

2.2a1

	- Array definitions can be referenced from other elements, if desired, to keep placement of elements consistent in arrays.
	- Array shapes continue to offer relative reference to subshape elements, in addition to the array.
	- Added a special array rotation that works to rotate the array (if applicable) around its pivot point. The other rotation will rotate the element from which the array is built.
	- Refactored rotation and flip handling due to the requirements of the array system when combined with pattern elements using relative transformations.
	- Added an array option to the pattern element.
	 - Allows for X and Y duplication of the element shape within the pattern element.
	- Moving to .NET Core 3.1 based on Eto updates.

2.1.1

	- Added graphicsMode switch in launch args.
	 - d3d11 : D3D 11
	 - vulkan : Vulkan
	 - opengl : OpenGL
	 - metal : Metal

2.1

	- Viewport optimization.

2.1b1

	- Prohibit references to bounding box elements; they are intended to derive from final pattern extents, so elements cannot depend on them.
	- Fixed UI bugs from bounding box implementation.
	- Ensure deferred bounding box generation captures all relevant properties.
	- Allow negative increment values where appropriate (dimension increments, bounding box margins).

2.1a3

	- Eto Veldrid updates.
	- Boundary shape type.
	 - Late addition to development plan, but allows for enclosure/overlap pattern boundary evaluations.

2.1a2

	- GTK3 prototype port added.
	- Performance tuning : on an ultrabook, build time for 225k test case went from 11 seconds to 7.8 seconds.
	- Re-enabled obfuscation.
	- Fixed packaging issues lingering from changes.

2.1a1

	- Moving libraries to .NET standard 2.0.
	- Veldrid viewport.

2.0b4

	- Added 'text' shape type. This is an extension of the rectangle type, where a text label is added to the exported layout. This makes RC set-ups easier to use.

2.0b3

	- Flip implementation.
	 - H, V, align.
	 - Reference sides are kept consistent with flipped shape, for ease of understanding.
	 - Not a variation source - all element instances are flipped according to the settings.
	- Oasis export highlighted a bug. Fixed.

2.0b2

	- Migrated to Eto.OpenTK for etoViewport infrastructure.
	- Relative rotation implementation.

2.0b1

	- Restore tessellation optimization that was disabled in a2 for debug work.
	- Fixed potential escapes from duplicate screening procedure.
	 ! This may cause a change in the output from 1.x because there was potential for duplicates (due to escapes).
	- Simplified subshape relative positioning UI.
	- Fixed X-shape relative positioning.
	- Refined and fixed up the internal codepaths to address bugs from the relative positioning code.
	- Rotation of elements within the pattern.

2.0a2

	- Completed the spec for the subshape-relative positioning feature. Testing needed to ensure things work well.

2.0a1

	- Refinements to UI updates for multi-threading evaluation.
	- Subshape-specific relative positioning (X/Y).
	 - Also using positioning in subshape.
